# @(#) Loop over command-line optional arguments
#
# The Tools Project: a Tools System and Paradigm for IT Production
# Copyright (Â©) 2003-2021 Pierre Wieser (see AUTHORS)
#
# The Tools Project is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# The Tools Project is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with The Tools Project; see the file COPYING. If not,
# see <http://www.gnu.org/licenses/>.
#
# Synopsis:
#
#   Interpret option arguments.
#	The search for option arguments terminates when finding the '--'
#	which marks the beginning of positional arguments.
#	Remaining positional arguments are save in 'ttp_args_pos' array.
#
# (I): 1. array of command-line args
#
# (O): variables are set as:
#
#		ttp_args_pos		the array of remaining positional args
#
#	   returns the errors count
#
# pwi 2013- 6- 3 creation
# pwi 2013- 6-25 fix arguments quoting
# pwi 2013- 7-15 review options dynamic computing
# pwi 2017- 6-21 publish the release at last
# pwi 2021-12-28 improve verbose execution
# pwi 2025- 2- 8 keep the remaining positional args

function optEvalArgs
{
	typeset -i _ret=0
	typeset _endofopt="no"
	typeset -i _ia=1
	while [ ${_ia} -le ${ttp_args_argc} ]; do
		#typeset _arg="$(echo $(eval echo '${'${_ia}'}'))"
		typeset _arg="${ttp_args_arga[${_ia}]}"
		[ "${_arg}" = "--" ] && break
		typeset _val=""

		# after the '--' word, we are supposed to find only positional
		#  args
		if [ "${_arg}" = "--" ]; then
			ttp_args_used[${_ia}]="yes"
			_endofopt="yes"
			break
		fi

		# split and extract argument for options that take one
		case ${_arg} in
			--*=*)
				_val="$(echo ${_arg} | sed -e 's/^[^=]*=//')"
				_arg="$(echo ${_arg} | sed 's/=.*//')"
				;;
		esac

		# now try to process the option and maybe its value
		case "${_arg}" in
			--*)
				if [ "${ttp_args_used[${_ia}]}" != "yes" ]; then
					ttp_args_used[${_ia}]="yes"
					#echo "optReadOptArgs: optGetOption" >&2
					optFindOption ${_arg:2}
					typeset -i _idx=$?
					#echo "optReadOptArgs: arg=$_arg, idx=$_idx" >&2
					if [ ${_idx} -eq 0 ]; then
						let _ret+=1
					else
						let _idx-=1
						typeset _name="${ttp_args_option[${_idx}]}"
						eval $(echo "opt_"${_name}"_set=yes")
						[ "${opt_verbose}" == "yes" ] && msgVerbose "setting opt_${_name}_set to 'yes'"
						typeset _type="${ttp_args_type[${_idx}]}"
						#echo "optReadOptArgs: arg=$_arg name=$_name desc=$_desc" >&2

						# this is a boolean option, so set its value to yes or no
						if [ "${_type}" = "b" ]; then
							typeset _prefix="${_arg:2:2}"
							[ "${_prefix}" = "no" -a "${_arg:4}" = "${_name:0:${#_arg}-4}" ] && _val="no" || _val="yes"
							eval $(echo "opt_${_name}=\"${_val}\"")
							[ "${opt_verbose}" == "yes" ] && msgVerbose "setting opt_${_name} to '${_val}'"
							#echo "eval $(echo "opt_${_name}=\"${_val}\"")" >&2

						# the option accepts/wants an argument
						#  which is optional if enclosed between square brackets []
						# no value is found for this option if:
						# - no value is provided after an '=' sign
						# - and there is no next argument on the command-line
						#    or the next argument is an option (begins with '--')
						else
							#let _ia=$(optReadOptArgValue ${_ia} ${_idx} "${_val}")
							typeset -i _valset=0
							if [ -z "${_val}" ]; then
								typeset -i _ib=${_ia}+1
								if [ ${_ib} -le ${ttp_args_argc} -a "${ttp_args_used[${_ib}]}" != "yes" ]; then
									typeset _barg="${ttp_args_arga[${_ib}]}"
									if [ "${_barg:0:2}" != "--" ]; then
										eval $(echo "opt_${_name}=\"${_barg}\"")
										[ "${opt_verbose}" == "yes" ] && msgVerbose "setting opt_${_name} to '${_barg}'"
										ttp_args_used[${_ib}]="yes"
										let _ia=${_ib}
										let _valset=1
									fi
								fi
							else
								eval $(echo "opt_${_name}=\"${_val}\"")
								[ "${opt_verbose}" == "yes" ] && msgVerbose "setting opt_${_name} to '${_val}'"
								let _valset=1
							fi
							if [ "${_type}" = "m" -a ${_valset} -eq 0 ]; then
								msgErr "'--${_name}' option expects a mandatory argument, which has not been found"
								let _ret+=1
							fi
						fi
					fi
				fi
				;;
		esac
		let _ia+=1
	done

	return ${_ret}
}
