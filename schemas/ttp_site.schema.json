{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "org.trychlos.TheToolsProject/schemas/site.schema.json",
    "title": "Site",
    "description_array": [
		"The 'site.json' configuration file is the global TTP configuration file for your site, and the first loaded by each command. It defines global TTP behavior.",
		"It is searched for among (hardcoded) 'etc/ttp/site.json', 'etc/toops/site.json', 'etc/site.json', 'etc/ttp/toops.json', 'etc/toops/toops.json', 'etc/toops.json', 'etc/ttp/ttp.json', 'etc/toops/ttp.json' or 'etc/ttp.json' in each path of TTP_ROOTS environment variable.",
		"The first found wins.",
		"",
		"Windows notes:",
		"- Take care of doubling your backslashes",
		"",
		"Dynamic values:",
		" May make use - in values only - of parameters between square brackets as [eval:...]",
		" 'eval' may be prefixed with an underscore in order to delay the eval (e.g. if it refers to another dynamic variable which needs to be resolved first).",
		"",
		"Site variables:",
		" The site integrator may use this same configuration file (and is encouraged to) to set his own site-level variables.",
		" These variables are free to the site integrator and NOT considered by TheToolsProject, though they can be used when evaluating dynamic values.",
		" Variables values can be accessed though TTP::var([ 'site', 'my', 'other', 'key' ]) the same way than TTP configuration variables.",
		" See below 'site' object.",
        "",
        "Unless otherwise specified, below values are overridable on a per-bode basis."
    ],
    "type": "object",
    "properties": {
        "enabled": {
            "description": "Whether this JSON configuration must be considered. Not per-node overridable.",
            "type": "boolean",
            "default": true
        },
        "site": {
            "description": "Site-specific variables. Structure and properties are free to the site integrator.",
            "type": "object"
        },
        "toops": {
            "description": "General configuration of the TTP behavior. Deprecated in favor of 'TTP' in v4.0.",
            "deprecated": true
        },
        "TTP": {
            "description": "General configuration of the TTP behavior",
            "type": "object",
            "properties": {
                "alerts": {
                    "description_array": [
                        "Configure here each medium which can be used to send alerts via 'ttp.pl alert'. All properties can be overriden on a per-node basis.",
                        "An alert has following properties:",
                        "- emitter: defaulting to the running node name",
                        "- level: defaulting to 'INFO'",
                        "- title: a single descriptive line",
                        "- message: a more complete alert content",
                        "- stamp: automatically added by the 'ttp.pl alert' command as an ISO 8601 date and time.",
                        "Media have common properties:",
                        "- enabled: whether this medium is enabled; will be fully ignored when disabled; defaulting to true (enabled).",
                        "- default: whether this medium is a default for 'ttp.pl alert' command; defaulting to false.",
                        "- command: either a single string, or an object 'command.byOS.<osname>; defaulting dependant of the exact used medium.",
                        "  Provided commands have access to <EMITTER>, <LEVEL>, <TITLE>, <MESSAGE>, <STAMP>, <OPTIONS> and <JSON> macros,",
                        "  the <JSON> macro being resolved with a stringified version of the alert JSON data.",
                        "When specifying a command, either as a simple string or as a 'byOS' object, you should take care that the specified command will not",
                        "inherit of '--dummy' or '--verbose' options of the parent command. Be cautious about what you exactly want."
                    ],
                    "type": "object",
                    "properties": {
                        "withFile": {
                            "description": "Whether and how to create a JSON alert file.",
                            "type": "object",
                            "properties": {
                                "default": {
                                    "description": "Whether creating an alert file is a default of the 'ttp.pl alert' command.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "enabled": {
                                    "description": "Whether creating an alert file is an enabled capability of the site.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "command": {
                                    "description_array": [
                                        "The command to be used to create the JSON alert file.",
                                        "The default command creates an 'alert-yyyymmddhhmisscccccc.json' file in the below dropDir directory."
                                    ],
                                    "type": [
                                        "string",
                                        "object"
                                    ],
                                    "default": "ttp.pl writejson into below dropDir"
                                },
                                "prettyJson": {
                                    "description": "Whether the JSON string should be prettified.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "dropDir": {
                                    "description": "The directory where alert files must be created.",
                                    "type": "string",
                                    "default": "[eval:File::Spec->catdir( TTP::tempDir(), 'TTP', 'alerts' )]"
                                }
                            }
                        },
                        "withMqtt": {
                            "description": "Whether and how publish the alert on the MQTT bus.",
                            "type": "object",
                            "properties": {
                                "default": {
                                    "description": "Whether publishing alerts to MQTT is a default of the 'ttp.pl alert' command.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "enabled": {
                                    "description": "Whether publishing alerts to MQTT is an enabled capability of the site.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "command": {
                                    "description": "The command to be used to publish to the MQTT bus.",
                                    "type": [
                                        "string",
                                        "object"
                                    ],
                                    "default": "mqtt.pl publish -topic [eval:TTP::nodeName()]/alert -payload \"<JSON>\" <OPTIONS>"
                                },
                                "topic": {
                                    "description": "A command which echoes the topic on stdout.",
                                    "type": "string",
                                    "default": "[eval:TTP::nodeName()]/alerts/[eval:Time::Moment->from_string( <STAMP> )->epoch()]"
                                }
                            }
                        },
                        "withSms": {
                            "description": "Whether and how send the alert by SMS.",
                            "type": "object",
                            "properties": {
                                "default": {
                                    "description": "Whether publishing alerts by SMS is a default of the 'ttp.pl alert' command.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "enabled": {
                                    "description": "Whether publishing alerts by SMS is an enabled capability of the site.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "command": {
                                    "description_array": [
                                        "The command to be used to send the alert by SMS.",
                                        "The command has access to additional macros:",
                                        "- <RECIPIENTS> is resolved with a comma-separated list of the recipients,",
                                        "- <CONTENTFNAME> is the filename of a text file which contains the full message.",
                                        "No default command is provided as of v4.1"
                                    ],
                                    "type": [
                                        "string",
                                        "object"
                                    ]
                                },
                                "prettyJson": {
                                    "description": "Whether the JSON string should be prettified.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "recipients": {
                                    "description": "The list of the recipients of the alert by SMS",
                                    "type": "array",
                                    "items": "string",
                                    "default": [
                                    ]
                                }
                            }
                        },
                        "withSmtp": {
                            "description": "Whether and how send the alert by email.",
                            "type": "object",
                            "properties": {
                                "default": {
                                    "description": "Whether publishing alerts by email is a default of the 'ttp.pl alert' command.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "enabled": {
                                    "description": "Whether publishing alerts by email is an enabled capability of the site.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "command": {
                                    "description_array": [
                                        "The command to be used to send the alert by email.",
                                        "The command has access to additional macros:",
                                        "- <RECIPIENTS> is resolved with a comma-separated list of the recipients,",
                                        "- <CONTENTFNAME> is the filename of a text file which contains the full message."
                                    ],
                                    "type": [
                                        "string",
                                        "object"
                                    ],
                                    "default": "smtp.pl send -to <RECIPIENTS> -subject \"<TITLE>\" -text \"<MESSAGE>\" <OPTIONS>"
                                },
                                "prefixTitle": {
                                    "description": "Whether to build the email subject as '[<LEVEL>] Alert - <TITLE>'.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "prettyJson": {
                                    "description": "Whether the JSON string should be prettified.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "recipients": {
                                    "description": "The list of the recipients of the alert email",
                                    "type": "array",
                                    "items": "string",
                                    "default": [
                                        "root@localhost"
                                    ]
                                }
                            }
                        }
                    }
                },
                "copyDir": {
                    "description_array": [
                        "The command used by TheToolsProject each time a tree of directories must be copied from a source to a target.",
                        "This can be either a simple command string or a byOS command.",
                        "Please note that, as the default 'File::Copy::Recursive::dircopy()' is less than efficient when managing exclusions,",
                        "all directory copies requiring some exclusions will make use of File::Copy::Recursive::fcopy().",
                        "We strongly suggest to use 'ttp.pl copydirs' each time you can as the command manages both full logs and these properties."
                    ],
                    "type": "object",
                    "properties": {
                        "command": {
                            "description": "The command to be used to copy a directory, either as a string or a 'byOS' object.",
                            "type": [
                                "object",
                                "string"
                            ],
                            "properties": {
                                "byOS": {
                                    "description": "Let a command be specific to the running OS.",
                                    "type": "object",
                                    "patternProperties": {
                                        "^.*$": {
                                            "description_array": [
                                                "The OS name as reported by Perl-Config, the value being the command to be applied for this OS.",
                                                "The value (the command) honors <SOURCE>, <TARGET> <EXCLUDEDIRS>>, <EXCLUDEFILES> and <OPTIONS> macros."
                                            ],
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "default": "File::Copy::Recursive::dircopy()"
                        },
                        "before": {
                            "description": "Whether 'ttp.pl copydirs' default to empty the target tree before the copy.",
                            "type": "object",
                            "properties": {
                                "emptyTarget": {
                                    "description": "Default value of 'ttp.pl copydirs' command.",
                                    "type": "boolean",
                                    "default": true
                                }
                            }
                        }
                    }
                },
                "copyFile": {
                    "description_array": [
                        "The command used by TheToolsProject each time a file must be copied from a source to a target.",
                        "This can be either a simple command string or a byOS command."
                    ],
                    "type": "object",
                    "properties": {
                        "command": {
                            "description": "The command to be used.",
                            "type": [
                                "object",
                                "string"
                            ],
                            "properties": {
                                "byOS": {
                                    "description": "Let a command be specific to the running OS.",
                                    "type": "object",
                                    "patternProperties": {
                                        "^.*$": {
                                            "description_array": [
                                                "The OS name as reported by Perl-Config, the value being the command to be applied for this OS.",
                                                "The value (the command) honors following macros:",
                                                "- <SOURCE> the source volume, directory and filename,",
                                                "- <SOURCEDIR> the source volume and directory,",
                                                "- <SOURCEFILE> the source filename,",
                                                "- <TARGET> the target volume, directory and filename,",
                                                "- <TARGETDIR> the target volume and directory",
                                                "- <TARGETFILE> the target filename",
                                                "- <OPTIONS> the options provided to the command."
                                            ],
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "default": "File::Copy::copy()"
                        }
                    }
                },
                "credentialsDirs": {
                    "description": "The list of subdirectories of TTP_ROOTS trees where we search for credentials. Deprecated in favor of 'credentials.dirs' in v4.7.",
                    "deprecated": true
                },
                "credentials": {
                    "description": "The configuration of the credentials.",
                    "type": "object",
                    "properties": {
                        "dirs": {
                            "description": "The list of subdirectories of TTP_ROOTS trees where we search for credentials.",
                            "type": "array",
                            "items": "string",
                            "default": [
                                "etc/credentials",
                                "etc/private"
                            ]
                        }
                    }
                },
                "daemons": {
                    "description": "The common configuration of the daemons.",
                    "type": "object",
                    "properties": {
                        "confDirs": {
                            "description": "The list of subdirectories of TTP_ROOTS trees where we search for daemons JSON configurations.",
                            "type": "array",
                            "items": "string",
                            "default": [
                                "etc/daemons",
                                "daemons"
                            ]
                        },
                        "execDirs": {
                            "description": "The list of subdirectories of TTP_ROOTS trees where we search for daemons executables.",
                            "type": "array",
                            "items": "string",
                            "default": [
                                "libexec/daemons"
                            ]
                        }
                    }

                },
                "DBMS": {
                    "description_array": [
                        "Common configuration for DBMS.",
                        "This configuration can be overriden not-only on a per-node basis (as most of the site configuration options), but also per service."
                    ],
                    "type": "object",
                    "properties": {
                        "archives": {
                            "description": "The configuration of the DBMS archives.",
                            "type": "object",
                            "properties": {
                                "periodicDir": {
                                    "description_array": [
                                        "The periodic, by time, root directory of the archives tree.",
                                        "This 'archives.periodicDir' directory can be got by the user via the 'dbms.pl vars --archivesPeriodic' command."
                                    ],
                                    "type": "string",
                                    "default": "[eval:TTP::dbmsArchivesPeriodic()]"
                                },
                                "rootDir": {
                                    "description_array": [
                                        "The root directory of the backups tree.",
                                        "This 'archives.rootDir' directory can be got by the user via the 'dbms.pl vars --archivesRoot' command."
                                    ],
                                    "type": "string",
                                    "default": "[eval:TTP::dbmsArchivesRoot()]"
                                }
                            }
                        },
                        "archivesDir": {
                            "description": "The periodic, by time, root directory of the archives tree. Deprecated in favor of 'archives.periodicDir' in v4.10.",
                            "deprecated": true
                        },
                        "archivesRoot": {
                            "description": "The root directory of the archives tree. Deprecated in favor of 'archives.rootDir' in v4.10.",
                            "deprecated": true
                        },
                        "backups": {
                            "description": "The configurations of the backups.",
                            "type": "object",
                            "properties": {
                                "executionReports": {
                                    "description": "Override the 'TTP.executionReports' configuration options for the DBMS backups.",
                                    "type": "object",
                                    "properties": {
                                        "withFile": {
                                            "description": "The configuration of the file-based DBMS backups execution reports.",
                                            "type": "object",
                                            "properties": {
                                                "default": {
                                                    "description": "Whether the file-based execution report is a default for DBMS backups.",
                                                    "type": "boolean",
                                                    "default": false
                                                },
                                                "command": {
                                                    "description_array": [
                                                        "The command to be used to create the JSON execution report file.",
                                                        "The default command creates a 'report-yyyymmddhhmisscccccc.json' file in the below dropDir directory."
                                                    ],
                                                    "type": [
                                                        "string",
                                                        "object"
                                                    ],
                                                    "default": "ttp.pl writejson into below dropDir"
                                                },
                                                "prettyJson": {
                                                    "description": "Whether the JSON string should be prettified.",
                                                    "type": "boolean",
                                                    "default": true
                                                },
                                                "dropDir": {
                                                    "description": "The directory where execution report files must be created.",
                                                    "type": "string",
                                                    "default": "[eval:File::Spec->catdir( TTP::tempDir(), 'TTP', 'executionReports' )]"
                                                }
                                            }
                                        },
                                        "withMqtt": {
                                            "description": "The configuration of the MQTT-based DBMS backups execution reports.",
                                            "type": "object",
                                            "properties": {
                                                "default": {
                                                    "description": "Whether MQTT-based is a default of the DBMS backups execution reports.",
                                                    "type": "boolean",
                                                    "default": false
                                                },
                                                "command": {
                                                    "description_array": [
                                                        "The command to be used to create the MQTT-based execution report topics.",
                                                        "The command has access to <TOPIC> macro."
                                                    ],
                                                    "type": [
                                                        "string",
                                                        "object"
                                                    ],
                                                    "default": "mqtt.pl publish -topic <TOPIC> -payload \"<JSON>\""
                                                },
                                                "topic": {
                                                    "description": "A command which echoes the topic on stdout.",
                                                    "type": "string",
                                                    "default": ""
                                                }
                                            }
                                        }
                                    }
                                },
                                "periodicDir": {
                                    "description_array": [
                                        "The periodic, by time, root directory of the backups tree.",
                                        "Rationale: having a per-day or per-week or per-month backups tree is the easiest way in order to periodically purge the backups.",
                                        "This is not mandatory at all, and the default is to stick to the 'backups.rootDir' value.",
                                        "This 'backups.periodicDir' directory can be got by the user via the 'dbms.pl vars --backupsPeriodic' command."
                                    ],
                                    "type": "string",
                                    "default": "[eval:TTP::dbmsBackupsRoot()]"
                                },
                                "rootDir": {
                                    "description_array": [
                                        "The root directory of the backups tree.",
                                        "This 'backups.rootDir' directory can be got by the user via the 'dbms.pl vars --backupsRoot' command."
                                    ],
                                    "type": "string",
                                    "default": "[eval:File::Spec->catdir( TTP::tempDir(), 'TTP', 'backups' )]"
                                }
        
                            }
                        },
                        "backupsDir": {
                            "description": "The periodic, by time, root directory of the backups tree. Deprecated in favor of 'backups.periodicDir' in v4.8.",
                            "deprecated": true
                        },
                        "backupsRoot": {
                            "description": "The root directory of the backups tree. Deprecated in favor of 'backups.rootDir' in v4.8.",
                            "deprecated": true
                        },
                        "restores": {
                            "description": "The configurations of the restores.",
                            "type": "object",
                            "properties": {
                                "executionReports": {
                                    "description": "Override the 'TTP.executionReports' configuration options for the DBMS restores.",
                                    "type": "object",
                                    "properties": {
                                        "withFile": {
                                            "description": "The configuration of the file-based DBMS restores execution reports.",
                                            "type": "object",
                                            "properties": {
                                                "default": {
                                                    "description": "Whether the file-based execution report is a default for DBMS restores.",
                                                    "type": "boolean",
                                                    "default": false
                                                },
                                                "command": {
                                                    "description_array": [
                                                        "The command to be used to create the JSON execution report file.",
                                                        "The default command creates a 'report-yyyymmddhhmisscccccc.json' file in the below dropDir directory."
                                                    ],
                                                    "type": [
                                                        "string",
                                                        "object"
                                                    ],
                                                    "default": "ttp.pl writejson into below dropDir"
                                                },
                                                "prettyJson": {
                                                    "description": "Whether the JSON string should be prettified.",
                                                    "type": "boolean",
                                                    "default": true
                                                },
                                                "dropDir": {
                                                    "description": "The directory where execution report files must be created.",
                                                    "type": "string",
                                                    "default": "[eval:File::Spec->catdir( TTP::tempDir(), 'TTP', 'executionReports' )]"
                                                }
                                            }
                                        },
                                        "withMqtt": {
                                            "description": "The configuration of the MQTT-based DBMS backups execution reports.",
                                            "type": "object",
                                            "properties": {
                                                "default": {
                                                    "description": "Whether MQTT-based is a default of the DBMS backups execution reports.",
                                                    "type": "boolean",
                                                    "default": false
                                                },
                                                "command": {
                                                    "description_array": [
                                                        "The command to be used to create the MQTT-based execution report topics.",
                                                        "The command has access to <TOPIC> macro."
                                                    ],
                                                    "type": [
                                                        "string",
                                                        "object"
                                                    ],
                                                    "default": "mqtt.pl publish -topic <TOPIC> -payload \"<JSON>\""
                                                },
                                                "topic": {
                                                    "description": "A command which echoes the topic on stdout.",
                                                    "type": "string",
                                                    "default": ""
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "deployments": {
                    "description_array": [
                        "When deploying from a development TTP layer to a pull reference, and from this pull reference to other machines of the parc.",
                        "The commands 'ttp.pl push' and 'ttp.pl pull' internally make use of 'ttp.pl copydirs' excluding .git files and directory."
                    ],
                    "type": "object",
                    "properties": {
                        "trees": {
                            "description": "The list of involved trees to be deployed everywhere on the parc.",
                            "type": "array",
                            "items": "object",
                            "properties": {
                                "source": {
                                    "description": "The path of the source tree.",
                                    "type": "string"
                                },
                                "target": {
                                    "description": "The path of the target tree.",
                                    "type": "string"
                                },
                                "git-check": {
                                    "description": "Whether this source tree is a git repository to be checked before trying to push it.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "git-tag": {
                                    "description": "Whether this source tree is a git repository to be tagged after having pushed it.",
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        },
                        "reference": {
                            "description": "The name of the node which acts as the pull reference",
                            "type": "string"
                        },
                        "excludeDirs": {
                            "description": "The default list of directory globs to exclude from the deployment, can be overriden in 'ttp.pl push' command.",
                            "type": "array",
                            "items": "string",
                            "default": []
                        },
                        "excludeFiles": {
                            "description": "The default list of file globs to exclude from the deployment, can be overriden in 'ttp.pl push' command.",
                            "type": "array",
                            "items": "string",
                            "default": []
                        }
                    }
                },
				"execRemote": {
					"description_array": [
						"The configuration for remote executions.",
						"The command has access to <TARGET> and <COMMAND> macros."
					],
					"type": "object",
					"properties": {
						"command": {
							"description": "The command to be run to remotely execute a command.",
							"type": [
								"object",
								"string"
							],
							"properties": {
								"byOS": {
									"description": "Let a command be specific to the running OS.",
									"type": "object",
									"patternProperties": {
										"^.*$": {
											"description": "The OS name as reported by Perl-Config, the value being the command to be applied for this OS.",
											"type": "string"
										}
									}
								}
							},
							"default": "ssh <TARGET> \". ~/.ttp_remote; <COMMAND>\""
						}
					}
				},
                "executionReports": {
                    "description_array": [
                        "The configuration of execution reports.",
                        "Media have common properties:",
                        "- enabled: whether this medium is enabled; will be fully ignored when disabled; defaulting to true (enabled).",
                        "- default: whether this medium is a default for execution reports; defaulting to false.",
                        "- command: either a single string, or an object 'command.byOS.<osname>; defaulting dependant of the exact used medium.",
                        "  Provided commands have access to <STAMP>, <OPTIONS> and <JSON> macros,",
                        "  the <JSON> macro being resolved with a stringified version of the execution report JSON data.",
                        "When specifying a command, either as a simple string or as a 'byOS' object, you should take care that the specified command will not",
                        "inherit of '--dummy' or '--verbose' options of the parent command. Be cautious about what you exactly want.",
                        "As of v4.9, only DBMS backup and restore operations provide execution reports."
                    ],
                    "type": "object",
                    "properties": {
                        "withFile": {
                            "description": "The configuration of the file-based execution reports.",
                            "type": "object",
                            "properties": {
                                "default": {
                                    "description": "Whether file-based is a default of the execution reports.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "enabled": {
                                    "description": "Whether file-based execution reports is an enabled capability of the site.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "command": {
                                    "description_array": [
                                        "The command to be used to create the JSON execution report file.",
                                        "The default command creates a 'report-yyyymmddhhmisscccccc.json' file in the below dropDir directory."
                                    ],
                                    "type": [
                                        "string",
                                        "object"
                                    ],
                                    "default": "ttp.pl writejson into below dropDir"
                                },
                                "prettyJson": {
                                    "description": "Whether the JSON string should be prettified.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "dropDir": {
                                    "description": "The directory where execution report files must be created.",
                                    "type": "string",
                                    "default": "[eval:File::Spec->catdir( TTP::tempDir(), 'TTP', 'executionReports' )]"
                                }
                            }
                        },
                        "withMqtt": {
                            "description": "The configuration of the MQTT-based execution reports.",
                            "type": "object",
                            "properties": {
                                "default": {
                                    "description": "Whether MQTT-based is a default of the execution reports.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "enabled": {
                                    "description": "Whether MQTT-based execution reports is an enabled capability of the site.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "command": {
                                    "description_array": [
                                        "The command to be used to create the MQTT-based execution report topics.",
                                        "The command has access to <TOPIC> macro."
                                    ],
                                    "type": [
                                        "string",
                                        "object"
                                    ],
                                    "default": "mqtt.pl publish -topic <TOPIC> -payload \"<JSON>\""
                                },
                                "topic": {
                                    "description": "A command which echoes the topic on stdout.",
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        }
                    }
                },
                "logs": {
                    "description": "The logs and messages configurations.",
                    "type": "object",
                    "properties": {
                        "commandsDir": {
                            "description_array": [
                                "The periodic directory where TTP writes commands and verbs logs.",
                                "This 'logs.commandsDir' directory can be got by the user via the 'ttp.pl vars --logsCommands' command."
                            ],
                            "type": "string",
                            "default": "[eval:TTP::logsPeriodic()]"
                        },
                        "mainFile": {
                            "description_array": [
                                "The full pathname of the file where TTP writes commands and verbs logs.",
                                "This 'logs.mainFile' filename can be got by the user via the 'ttp.pl vars --logsMain' command."
                            ],
                            "type": "string",
                            "default": "[eval:File::Spec->catfile( TTP::logsCommands(), 'main.log' )]"
                        },
                        "periodicDir": {
                            "description_array": [
                                "The periodic, by time, root directory of the logs tree.",
                                "Rationale: having a per-day or per-week or per-month logs tree is the easiest way in order to periodically purge the logs.",
                                "This is not mandatory at all, and the default is to stick to the 'logs.rootDir' value.",
                                "This 'logs.periodicDir' directory can be got by the user via the 'ttp.pl vars --logsPeriodic' command."
                            ],
                            "type": "string",
                            "default": "[eval:TTP::logsRoot()]"
                        },
                        "rootDir": {
                            "description_array": [
                                "The root directory of the logs tree.",
                                "This 'logs.rootDir' directory can be got by the user via the 'ttp.pl vars --logsRoot' command."
                            ],
                            "type": "string",
                            "default": "[eval:File::Spec->catdir( TTP::tempDir(), 'TTP', 'logs' )]"
                        }
                    }
                },
                "logsCommands": {
                    "description": "The periodic directory where TTP writes commands and verbs logs. Deprecated in favor of 'logs.commandsDir' in v4.7.",
                    "deprecated": true
                },
                "logsDaily": {
                    "description": "The periodic, by time, root directory of the logs tree. Deprecated in favor of 'logs.periodicDir' in v4.7.",
                    "deprecated": true
                },
                "logsMain": {
                    "description": "The full pathname of the file where TTP writes commands and verbs logs. Deprecated in favor of 'logs.mainFile' in v4.7.",
                    "deprecated": true
                },
                "logsRoot": {
                    "description": "The root directory of the logs tree. Deprecated in favor of 'logs.rootDir' in v4.7.",
                    "deprecated": true
                },
                "messages": {
                    "description": "Defines the default behavior for msgDummy(), msgErr(), msgOut(), msgVerbose() and msgWarn() functions.",
                    "type": "object",
                    "properties": {
                        "msgDummy": {
                            "description": "Defines the default behavior of TTP::Message::msgDummy() function.",
                            "type": "object",
                            "properties": {
                                "withColor": {
                                    "description": "Whether these messages default to be colored.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "withLog": {
                                    "description": "Whether these messages are written in the log file.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "color": {
                                    "description": "The ANSI color to be used when displaying the message, only honored when 'withColor' is true.",
                                    "type": "string",
                                    "default": "cyan"
                                },
                                "marker": {
                                    "description": "An optional prefix for these messages.",
                                    "type": "string",
                                    "default": "(DUM) "
                                }
                            }
                        },
                        "msgErr": {
                            "description": "Defines the default behavior of TTP::Message::msgErr() function.",
                            "type": "object",
                            "properties": {
                                "withColor": {
                                    "description": "Whether these messages default to be colored.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "withLog": {
                                    "description": "Whether these messages are written in the log file.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "color": {
                                    "description": "The ANSI color to be used when displaying the message, only honored when 'withColor' is true.",
                                    "type": "string",
                                    "default": "bold red"
                                },
                                "marker": {
                                    "description": "An optional prefix for these messages.",
                                    "type": "string",
                                    "default": "(ERR) "
                                }
                            }
                        },
                        "msgOut": {
                            "description": "Defines the default behavior of TTP::Message::msgOut() function.",
                            "type": "object",
                            "properties": {
                                "withColor": {
                                    "description": "Whether these messages default to be colored.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "withLog": {
                                    "description": "Whether these messages are written in the log file.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "color": {
                                    "description": "The ANSI color to be used when displaying the message, only honored when 'withColor' is true.",
                                    "type": "string",
                                    "default": ""
                                },
                                "marker": {
                                    "description": "An optional prefix for these messages.",
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        },
                        "msgVerbose": {
                            "description": "Defines the default behavior of TTP::Message::msgVerbose() function.",
                            "type": "object",
                            "properties": {
                                "withColor": {
                                    "description": "Whether these messages default to be colored.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "withLog": {
                                    "description": "Whether these messages are written in the log file.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "color": {
                                    "description": "The ANSI color to be used when displaying the message, only honored when 'withColor' is true.",
                                    "type": "string",
                                    "default": "bright_blue"
                                },
                                "marker": {
                                    "description": "An optional prefix for these messages.",
                                    "type": "string",
                                    "default": "(VER) "
                                }
                            }
                        },
                        "msgWarn": {
                            "description": "Defines the default behavior of TTP::Message::msgWarn() function.",
                            "type": "object",
                            "properties": {
                                "withColor": {
                                    "description": "Whether these messages default to be colored.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "withLog": {
                                    "description": "Whether these messages default to be written in the log file.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "color": {
                                    "description": "The ANSI color to be used when displaying the message, only honored when 'withColor' is true.",
                                    "type": "string",
                                    "default": "bright_yellow"
                                },
                                "marker": {
                                    "description": "An optional prefix for these messages.",
                                    "type": "string",
                                    "default": "(WAR) "
                                }
                            }
                        }
                    }
                },
                "Message": {
                    "description": "Defines the default behavior for msgDummy(), msgErr(), msgOut(), msgVerbose() and msgWarn() functions. Deprecated in favor of 'messages' in v4.7.",
                    "deprecated": true
                },
                "moveDir": {
                    "description_array": [
                        "The command to be used to move a directory.",
                        "May use <SOURCE> and <TARGET> macros."
                    ],
                    "type": [
                        "object",
                        "string"
                    ],
                    "properties": {
                        "byOS": {
                            "description": "Let a command be specific to the running OS.",
                            "type": "object",
                            "patternProperties": {
                                "^.*$": {
                                    "description": "The OS name as reported by Perl-Config, the value being the command to be applied for this OS.",
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": "Use copyDir + removeTree"
                },
                "MQTTGateway": {
                    "description_array": [
                        "Address the MQTT gateway (aka the MQTT broker) to be able to publish our topics.",
                        "If needed, username and password are managed through the credentials usual way.",
                        "The credentials are expected to be found in 'credentials.dirs/site.json', with a schema like:",
                        "    \"MQTTGateway\": {",
                        "        \"11.12.13.14:1883\": {",
                        "            \"username\": \"myUsername\",",
                        "            \"password\": \"myPassword\"",
                        "        }",
                        "    }",
                        "and may be got with \"TTP::Credentials::get([ 'MQTTGateway', $broker, 'username' ]);\" sentence."
                    ],
                    "type": "object",
                    "properties": {
                        "broker": {
                            "description": "The name or the IP address of the broker. Deprecated in favor of 'host' in v4.2.",
                            "deprecated": true
                        },
                        "host": {
                            "description": "The address name or IP, possibly with a colon and a port number, of the broker.",
                            "type": "string",
                            "default": "localhost"
                        },
                        "port": {
                            "description": "The broker port number to connect to. Deprecated in favor of 'host' in v4.7",
                            "deprecated": true
                        },
                        "wantsAccount": {
                            "description": "Whether this MQTT gateway wants identified connections.",
                            "type": "boolean",
                            "default": true
                        },
                        "wantsPassword": {
                            "description": "Whether this MQTT gateway wants authenticated connections.",
                            "type": "boolean",
                            "default": true
                        }
                    }
                },
                "nodes": {
                    "description": "General configuration of the nodes.",
                    "type": "object",
                    "properties": {
                        "confDirs": {
                            "description": "List of subdirectories of TTP_ROOTS where we can find nodes JSON configuration files. Not per-node overidable.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": [
                                "etc/nodes",
                                "etc/machines"
                            ]
                        },
                        "dirs": {
                            "description": "List of subdirectories of TTP_ROOTS where we can find nodes JSON configuration files. Deprecated in favor of 'nodes.confDirs' in v4.7.",
                            "deprecated": true
                        },
                        "hostname": {
                            "description": "How to get the hostname of a machine.",
                            "type": "object",
                            "properties": {
                                "short": {
                                    "description": "Whether we want a short hostname, defaulting to keep the machine hostname as set by the administrator.",
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        },
                        "logicals": {
                            "description": "The properties needed to manage the logical machines. Not per-node overidable.",
                            "type": "object",
                            "properties": {
                                "regexp": {
                                    "description_array": [
                                        "A regular expression or a list of the regular expressions the mounted filesystems must match to identify a logical machine.",
                                        "Regular expressions should be anchored and identify the first mount point.",
                                        "",
                                        "Example:",
                                        "   \"regexp\": \"^/(ne.*)$|^/(bo.*)$\""
                                    ],
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "nodeRoot": {
                    "description": "The root directory of the node. Deprecated in v4.7.",
                    "deprecated": true
                },
                "nodesDirs": {
                    "description": "List of subdirectories of TTP_ROOTS where we can find nodes JSON configuration files. Deprecated in favor of 'nodes.dirs' in v4.1.",
                    "deprecated": true
                },
                "services": {
                    "description": "General configuration of the services.",
                    "type": "object",
                    "properties": {
                        "confDirs": {
                            "description": "List of subdirectories of TTP_ROOTS where we can find services JSON configuration files. Not per-node overidable.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": [
                                "etc/services"
                            ]
                        }
                    }
                },
                "servicesDirs": {
                    "description": "List of subdirectories of TTP_ROOTS where we can find services JSON configuration files. Deprecated in favor of 'services.confDirs' in v4.10.",
                    "deprecated": true
                },
                "SMTPGateway": {
                    "description_array": [
                        "'smtp.pl send' command needs a MTA to proceed to emails sending.",
                        "Default is to rely on a local MTA.",
                        "In the case of the lack of a local MTA, you have to configure the SMTP gateway here.",
                        "If needed, username and password are managed through the credentials usual way."
                    ],
                    "type": "object",
                    "properties": {
                        "host": {
                            "description": "The MTA, defaulting to localhost.",
                            "type": "string",
                            "default": "localhost"
                        },
                        "port": {
                            "description_array": [
                                "The remote port.",
                                "Please note that our code tries to use suitable defaults depending of the used protocol, or tries to choose the better protocol depending of the specified port."
                            ],
                            "type": "integer",
                            "default": 22
                        },
                        "debug": {
                            "description": "Whether to have debug traces from the perl Email module.",
                            "type": "boolean",
                            "default": false
                        },
                        "security": {
                            "description": "The preferred security protocol. May be 'ssl' or 'starttls'. Most often a suitable default can be computed from the port number.",
                            "type": "string"
                        },
                        "timeout": {
                            "description": "The timeout (in sec.) of the connection to the MTA.",
                            "type": "integer",
                            "default": 60
                        },
                        "helo": {
                            "description": "The HELO message.",
                            "type": "string",
                            "default": "current execution node"
                        },
                        "mailfrom": {
                            "description": "Default email emitter.",
                            "type": "string",
                            "default": "No Reply <no-reply@localhost>"
                        },
                        "wantsAccount": {
                            "description": "Whether this SMTP gateway wants identified connections.",
                            "type": "boolean",
                            "default": true
                        },
                        "wantsPassword": {
                            "description": "Whether this SMTP gateway wants authenticated connections.",
                            "type": "boolean",
                            "default": true
                        }
                    }
                },
                "Telemetry": {
                    "description": "The configuration of the telemetry. Deprecated in favor of 'telemetry' in v4.5.",
                    "deprecated": true
                },
                "telemetry": {
                    "description_array": [
                        "The configuration of the telemetry.",
                        "Starting with its v3.0 version, TheToolsProject has chosen Prometheus ecosystem to host its telemetry, while keeping the capability",
                        "to have a messaging-based (MQTT) telemetry. Prometheus let us sent our telemetry either via the PushGateway or via the TextFileCollector.",
                        "You can note that TTP does not provide any Prometheus exporter.",
                        "The three (MQTT, HTTP and TextFile) medias are both configurable here.",
                        "Prometheus defines its metrics as an object with following properties:",
                        "- a name,",
                        "- a numeric value,",
                        "- an optional help line,",
                        "- an optional list of labels defined as \"name\"=\"value\".",
                        "Please note that, while the list of labels is unordered from Prometheus point of view, and so unordered in HTTP PushGateway and text TextFile collector,",
                        "it is ordered from MQTT point of view because they can be parts of the built topic.",
                        "The labels may vary from verb to verb, but always start with 'host=<NODE>'.",
                        "The following macros are available to the 'telemetry.pl' verbs:",
                        "- <NAME>: the metric name, always 'ttp_'-prefixed,",
                        "- <VALUE>: the metric value, always a scalar, must be a numerical value when publishing on HTTP or TextFile,",
                        "- <HELP>: the metric help line,",
                        "- <LABELS>: the provided (ordered) labels as a comma-separated string,",
                        "- <LABEL_NAMES>: the provided (ordered) label names as a comma-separated string,",
                        "- <LABEL_VALUES>: the provided (ordered) label values as a comma-separated string."
                    ],
                    "type": "object",
                    "properties": {
                        "server": {
                            "description": "The configuration of the telemetry server.",
                            "type": "object",
                            "properties": {
                                "url": {
                                    "description": "The URL of the Prometheus server",
                                    "type": "string"
                                }
                            }
                        },
                        "withHttp": {
                            "description": "The HTTP-based configuration of the telemetry, which addresses the Prometheus PushGateway nstalled besides of the Prometheus server.",
                            "type": "object",
                            "properties": {
                                "default": {
                                    "description": "Whether the HTTP-based telemetry is a default of the 'telemetry.pl publish' command.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "enabled": {
                                    "description": "Whether publishing a telemtry to the HTTP gateway is an enabled capability of the site.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "command": {
                                    "description": "The command to be run to publish a telemetry to the HTTP gateway.",
                                    "type": [
                                        "object",
                                        "string"
                                    ],
                                    "properties": {
                                        "byOS": {
                                            "description": "Let a command be specific to the running OS.",
                                            "type": "object",
                                            "patternProperties": {
                                                "^.*$": {
                                                    "description": "The OS name as reported by Perl-Config, the value being the command to be applied for this OS.",
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "withMqtt": {
                            "description": "The messaging-based configuration of the telemetry, i.e. the configuration needed to publish telemetry to the MQTT bus.",
                            "type": "object",
                            "properties": {
                                "default": {
                                    "description": "Whether the messaging-based telemetry is a default of the 'telemetry.pl publish' command.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "enabled": {
                                    "description": "Whether publishing a telemtry to the MQTT bus is an enabled capability of the site.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "command": {
                                    "description": "The command to be run to publish a telemetry on the MQTT bus.",
                                    "type": [
                                        "object",
                                        "string"
                                    ],
                                    "properties": {
                                        "byOS": {
                                            "description": "Let a command be specific to the running OS.",
                                            "type": "object",
                                            "patternProperties": {
                                                "^.*$": {
                                                    "description": "The OS name as reported by Perl-Config, the value being the command to be applied for this OS.",
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "default": "mqtt.pl publish -topic <TOPIC> -payload \"<VALUE>\""
                                },
                                "topic": {
                                    "description": "Build the topic to be used when publishing the telemetry to MQTT.",
                                    "type": "string",
                                    "default": "<NODE>/telemetry/<LABEL_VALUES>/<NAME>"
                                }
                            }
                        },
                        "withText": {
                            "description": "The text-based configuration of the telemetry.",
                            "type": "object",
                            "properties": {
                                "default": {
                                    "description": "Whether the text-based telemetry is a default of the 'telemetry.pl publish' command.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "enabled": {
                                    "description": "Whether publishing a telemetry through the textfile collector is an enabled capability of the site.",
                                    "type": "boolean",
                                    "default": true
                                },
                                "dropDir": {
                                    "description": "The path to the directory of the TextFile collector.",
                                    "type": "string",
                                    "default": "[eval:File::Spec->catdir( TTP::tempDir(), 'TTP', 'collector' )]"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
