{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "org.trychlos.TheToolsProject/schemas/node.schema.json",
    "title": "Node",
    "description_array": [
		"The '<node>.json' configuration file is the per-node configuration file for TheToolsProject. Each involved node must have its own <node>.json configuration file.",
		"It is searched for among the site-defined 'nodes.confDirs' directories, which defaults to 'etc/nodes/<node>.json' and 'etc/machines/<node>.json', in each path of TTP_ROOTS environment variable.",
		"The first found wins.",
		"",
		"Windows notes:",
		"- Take care of doubling your backslashes",
		"",
		"Dynamic values:",
		" May make use - in values only - of parameters between square brackets as [eval:...]",
		" 'eval' may be prefixed with an underscore in order to delay the eval (e.g. if it refers to another dynamic variable which needs to be resolved first).",
        "",
        "Unless otherwise specified, below values take their default value from global site.json.",
        "Most of commands here accept a <NODE> macro which is evaluated as TTP::nodeName()."
    ],
    "type": "object",
    "properties": {
        "enabled": {
            "description": "Whether this JSON configuration must be considered.",
            "type": "boolean",
            "default": true
        },
        "Environment": {
            "description": "The environment to which this machine is attached. Deprecated in favor of 'environment' in v4.2.",
            "deprecated": true
        },
        "environment": {
            "description_array": [
                "The environment to which this machine is attached.",
                "A machine is attached to at most one environment which, for example, determines the level of expected service quality.",
			    "If this is not what you are searching for, maybe you could take a glance at the logical machine paradigm, unless you could be more interested by roles.",
                "Please note too that services vs. nodes vs. environments should be determined so that a service + an environment identifies zero or one node only."
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "The identifier of the environment. Deprecated in favor of 'id' in v4.2.",
                    "deprecated": true
                },
                "id": {
                    "description": "The identifier of the environment.",
                    "type": "string"
                }
            }
        },
        "Services": {
            "description": "The services running (and managed) on this node. Deprecated in favor of 'services' in v4.10.",
            "deprecated": true
        },
        "services": {
            "description_array": [
                "The services running (and managed) on this node.",
                "Note that even if the node doesn't want override any service configuration option, it still MUST define the service here to mark it as managed by the node."
            ],
            "type": "object",
            "properties": {
                "patternProperties": {
                    "^.*$": {
                        "description": "The service name, available in commands values as <SERVICE> macro.",
                        "type": "string"
                    }
                },
                "properties": {
                    "enabled": {
                        "description": "Whether this service is enabled on the node.",
                        "type": "boolean",
                        "default": true
                    }
                }
            }
        },
        "status": {
            "description": "The configuration of commands to be executed to get the status of the node.",
            "type": "object",
            "properties": {
                "monitor": {
                    "description": "A list of commands to be executed to get the full status of the node, not included the services which have their own checks.",
                    "type": "object",
                    "properties": {
                        "commands": {
                            "description": "The list of commands to be executed.",
                            "type": "array",
                            "items": [
                                "string",
                                "object"
                            ],
                            "properties": {
                                "byOS": {
                                    "description": "Let a command be specific to the running OS.",
                                    "type": "object",
                                    "patternProperties": {
                                        "^.*$": {
                                            "description": "The OS name as reported by Perl-Config, the value being the command to be applied for this OS.",
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
