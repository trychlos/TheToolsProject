{
	"comments": [
		"site.sample.json",
		"The 'site.json' site configuration file is the first file loaded by each command. It defines global TTP behavior.",
		"It is searched for among (hardcoded) 'etc/ttp/site.json', 'etc/site.json', 'etc/ttp/toops.json' or 'etc/toops.json' in each path of TTP_ROOTS environment variable.",
		"The first found wins.",
		"",
		"This is the global TTP configuration for your site",
		"In Windows environment, take care of doubling your backslashes",
		"May make use - in values only - of parameters between square brackets as [eval:...]",
		"At the moment, there is only one type of parameters:",
		"- those specified by '[eval:...]' indicate some code to be evaluated at run time.",
		"  'eval' may be prefixed with an underscore in order to delay the eval (e.g. if it refers to another dynamic variable which needs to be resolved first).",
		"",
		"Note 1: unless otherwise specified, variables here may be overriden on a per-node basis.",
		"Note 2: Site integrator may use this same configuration file (and is encouraged to) to set his own site-level variables.",
		"These variables are free to the site integrator and NOT considered by TheToolsProject, though they can be used in below TTP JSON dynamic evaluations."
	],

	"site_comments": [
		"We can define here some variables at the site level."
	],
	"site": {
		"commandsDir": "[eval:File::Spec->catdir( TTP::vars([ 'site', 'rootDir' ]), 'SiteResources', 'Commands' )]",
		"workloadSummary_comments": [
			"manage macros: SUBJECT, OPTIONS"
		],
		"workloadSummary": {
			"command": "smtp.pl send -subject \"<SUBJECT>\" -to my-admin@example.com <OPTIONS>"
		},
		"rootDir": "C:\\CUSTOMER_1234"
	},

	"TTP": {
		"alerts": {
			"withFile": {
				"enabled": true,
				"default": true,
				"dropDir": "[eval:File::Spec->catdir( TTP::logsRoot(), Time::Moment->now->strftime( '%y%m%d' ), 'Alerts' )]",
				"command": "ttp.pl writejson -file [eval:File::Spec->catfile( TTP::alertsFileDropdir(), Time::Moment->now->strftime( '%Y%m%d%H%M%S%6N' ).'.json' )] -data \"<JSON>\" <OPTIONS>",
				"prettyJson": true
			},
			"withMqtt": {
				"default": true,
				"enabled": true,
				"command": "mqtt.pl publish -topic $topic -payload \"<JSON>\" <OPTIONS>",
				"topic": "[eval:TTP::nodeName()]/alerts/[eval:Time::Moment->from_string( <STAMP> )->epoch()]"
			},
			"withSms" : {
				"enabled": true,
				"default": true,
				"command": "",
				"prettyJson": true
			},
			"withSmtp" : {
				"enabled": true,
				"default": true,
				"command": "smtp.pl send -to alerts@example.com -subject <TITLE> -text <MESSAGE> <OPTIONS>",
				"prettyJson": true
			}
		},

		"copyDir_comments": [
			"manage macros: SOURCE, TARGET, EXCLUDEDIRS, EXCLUDEFILES and OPTIONS"
		],
		"copyDir": {
			"byOS": {
				"MSWin32": {
					"command": "robocopy <SOURCE> <TARGET> /E /TS /FP /NP /BYTES"
				}
			}
		},
		"copyFile_comments": [
			"manage macros: SOURCE, SOURCEDIR, SOURCEFILE, TARGET, TARGETDIR, TARGETFILE, OPTIONS"
		],

		"credentials": {
			"dirs": [
				"etc/credentials",
				"etc/private"
			]
		},

		"daemons": {
			"confDirs": [
				"etc/daemons",
				"daemons"
			],
			"execDirs": [
				"libexec/daemons"
			]
		},

		"DBMS": {
			"backupsDir": "[eval:File::Spec->catdir( TTP::var([ 'DBMS', 'backupsRoot' ]), Time::Moment->now->strftime( '%y%m%d' ), TTP::nodeName())]",
			"backupsRoot": "[eval:File::Spec->catdir( TTP::vars([ 'site', 'rootDir' ]), 'dailySQLBackups' )]",
			"instance": "MSSQLSERVER",
			"byInstance": {
				"MSSQLSERVER": {
					"package": "TTP::SqlServer"
				}
			}
		},

		"deployemnts_comments": [
			"When you develop on your machine, you may want to push the current state of your developments to a master reference tree, which will be later pulled to other nodes.",
			"This is used by 'ttp.pl push' and 'ttp.pl pull' commands."
		],
		"deployments": {
			"trees": [
				{
					"source": "/path/to/development/tree/aka/source/of/pushes",
					"target": "/path/to/target/pushed/tree/which/happens/to/be/master/reference/tree/of/deployments/aka/source/of/pulls",
					"git-check": false,
					"git-tag": false
				}

			],
			"reference": "pull-reference-node-name",
			"command": {
				"byOS": {
					"MSWin32": "robocopy <SOURCE> <TARGET> /MIR"
				}
			}
		},

		"executionReports": {
			"withFile_comments": [
				"manage macros: DATA"
			],
			"withFile": {
				"enabled": true,
				"dropDir": "[eval:File::Spec->catdir( TTP::logsRoot(), Time::Moment->now->strftime( '%y%m%d' ), 'execReports' )]",
				"command": "ttp.pl writejson -file [eval:File::Spec->catfile( TTP::var([ 'executionReports', 'withFile', 'dropDir' ]), Time::Moment->now->strftime( '%Y%m%d%H%M%S%6N' ).'.json' )] -data \"<DATA>\""
			},
			"withMqtt_comments": [
				"manage macros: SUBJECT, DATA, OPTIONS"
			],
			"withMqtt": {
				"enabled": true,
				"command": "mqtt.pl publish -topic <SUBJECT> -payload \"<DATA>\" <OPTIONS>"
			}
		},

		"logs": {
			"periodicDir": "[eval:File::Spec->catdir( TTP::logsRoot(), Time::Moment->now->strftime( '%y%m%d' ))]",
			"rootDir": "[eval:File::Spec->catdir( TTP::tempDir(), 'TTP' )]"
		},

		"moveDir_comments": [
			"manage macros: SOURCE, TARGET"
		],
		"moveDir": {
			"byOS": {
				"MSWin32": {
					"command": "robocopy <SOURCE> <TARGET> /E /MOVE /TS /FP /NP /BYTES"
				}
			}
		},

		"MQTTGateway": {
			"host": "10.11.12.13:1883"
		},

		"nodes": {
			"confDirs": [
				"etc/nodes",
				"etc/machines"
			],
			"hostname": {
				"short": false
			},
			"logicals": {
				"regexp": ""
			}
		},

		"SMTPGateway": {
			"host": "mail.example.com",
			"port": 465,
			"mailfrom": "No Reply <no-reply@example.com>"
		},

		"telemetry": {
			"withMqtt": {
				"enabled": false,
				"command": "mqtt.pl publish -topic <TOPIC> -payload \"<PAYLOAD>\""
			},
			"withHttp_comments": [
				"The Prometheus PushGateway which is installed besides of the Prometheus server"
			],
			"withHttp": {
				"enabled": false,
				"url": "http://10.11.12.13:9091/metrics/job/telemetry/host/[eval:TTP::nodeName()]"
			},
			"withTextfile_comments": [
				"The Prometheus TextFileCollector"
			],
			"withTextfile": {
				"enabled": false,
				"dropDir": "[eval:TTP::tempDir()]"
			}
		}
	}
}
