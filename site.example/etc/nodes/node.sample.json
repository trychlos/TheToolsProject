{
	"comments": [
		"A node JSON configuration file.",
		"Define here the node configuration, maybe its role(s), the run services and their configuration."
	],

	"enabled_comments": [
		"Whether this node configuration file should be examined when scanning all nodes.",
		"This let us have this 'node.sample.json' in the node/ directory without being actually used.",
		"Note that disabling this node will fully prevent it to be visible in the list or loadable, or anything. The node will no more be visible in TTP context.",
		"Note too that the previous sentence is not exactly true: if the JSON is malformed, TTP will emit a warning before being able to detect it is disabled.",
		"Hardcoded default is 'true'"
	],
	"enabled": false,

	"services_comments": [
		"These are the services defined on this host as objects where the top key if the name of the service. At least this top key should be specified, even if with an empty properties object.",
		"Values may be:",
		"- dbms: a hash of the involved DBMS objects, where the top key is the instance name and values may be:",
		"  > databases: an array of the involved databases names in this instance",
		"- ...",
		"- A service can define a 'workloads' hash of parameters to be given to the specified workload.",
		"  E.g. we have a 'daily.morning' workload, executed at the very beginning of each day. This workload is responsible to purge logs, have a database full backup, check for available space, and so on.",
		"  And we also have a 'daily.periodic.2h' workload for differential backups of live production databases.",
		"  We could so define any workload in any service...",
		"  'workloads' is a hash whose keys are the name of each workload this service subscribes to, values being an (ordered) array of the work tasks associated to this workload for this service.",
		"  Each work task is a hash whose content depends mainly of the particular involved workload, but may have:",
		"  > a 'label'",
		"  > an array of 'commands'",
		"  > the order as an optional integer",
		"    A word of caution: due to the way Perl::JSON interprets the zero integer of the '0' string, do not use these values!",
		"    For consistency reasons, you should rather use only strings.",
		"    Due to the above Perl 'not-a-bug-but-a-feature', do not use single zero, either as a string nor an integer.",
		"- ...",
		""
	],
	"services": {
		"Canal33": {
			"DBMS": {
				"limitDatabases": [
					"Canal33"
				]
			},
			"monitor": {
				"ovh": {
					"ip": "ip-87.98.189.58"
				},
				"url": "http://canal33.sysnrg.com",
				"switch": {
					"scheduled": "\\Inlingua\\tom17.backup.startup"
				}
			},
			"workloads": {
			}
		},
		"Dom.2008": {
			"DBMS": {
			},
			"status": {
				"live": "http.pl get -nocolored -url http://ip.test.blingua.net -header X-Sent-By -accept ...",
				"before": {
					"commands": [
					]
				},
				"commands":[
				],
				"replace": {
					"commands": [
					]
				},
				"after": {
					"commands": [
					]
				}
			}
		},
		"Technical Workloads": {
			"hidden": true,
			"workloads": {
				"daily.morning": [
					{
						"label": "Purge directories",
						"order": "00",
						"commands": [
							"ttp.pl purgedirs -nocolored -dircmd \"dbms.pl vars -nocolored -backupsRoot\" -keep 7",
							"ttp.pl purgedirs -nocolored -dircmd \"dbms.pl vars -nocolored -archivesRoot\" -keep 7",
							"ttp.pl purgedirs -nocolored -dircmd \"ttp.pl vars -nocolored -logsRoot\" -keep 7"
						]
					}
				],
				"startup": [
					{
						"label": "Advertise at startup",
						"commands": [
							"call [eval:File::Spec->catfile( TTP::var([ 'site', 'commandsDir' ]), 'startup.cmd' )]"
						]
					}
				],
				"test1": [
					{
						"label": "test workload",
						"commands_x": [
							"dbms.pl backup -nocolored -instance DEV -database Dom1 -diff",
							"ttp.pl list -nocolored -services"
						],
						"commands": [
							"daemon.pl start -nocolored -name tom59-backup-monitor-daemon -- -remote NS3232346"
						]
					}
				]
			}
		}
	},
	"DBMS": {
		"archives": {
			"periodicDir": "[eval:File::Spec->catdir( TTP::var([ 'DBMS', 'archivesRoot' ]), Time::Moment->now->strftime( '%y%m%d' ))]",
			"rootDir": "\\[eval:File::Spec->catdir( '\\ftpback-rbx7-618.ovh.net', 'ns3153065.ip-51-91-25.eu', '<NODE>', 'SQLBackups' )]"
		}
	},
	"environment": {
		"id": "DEV"
	},

	"remoteShare": "\\\\10.122.1.14\\C"
}
